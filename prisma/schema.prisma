// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @default(uuid()) @db.Uuid
  name               String               @db.VarChar(255)
  surname            String               @db.VarChar(255)
  email              String               @unique @db.VarChar(255)
  password           String               @db.VarChar(255)
  cpf                String               @unique @db.Char(11)
  gender             String               @db.Char(1)
  birthDate          DateTime             @db.Timestamp(6)
  createdAt          DateTime             @default(now()) @db.Timestamp(6)
  updatedAt          DateTime             @updatedAt
  addressId          String               @db.Uuid
  address            Address              @relation(fields: [addressId], references: [id])
  houses             House[]
  preferenceId       String?              @unique @db.Uuid
  preference         ProviderPreferences? @relation(fields: [preferenceId], references: [id])
  providerContract   Contract[]           @relation("providerContract")
  contractorContract Contract[]           @relation("contractorContract")
  approved           Boolean              @default(false)
}

model ProviderPreferences {
  id                 String                       @id @default(uuid()) @db.Uuid
  animals            Boolean
  neighborhoods      NeighborhoodsOnPreferences[]
  maximumMetersBuilt Int
  user               User?
}

model NeighborhoodsOnPreferences {
  providerPreferences   ProviderPreferences @relation(fields: [providerPreferencesId], references: [id])
  providerPreferencesId String              @db.Uuid
  neighborhood          Neighborhood        @relation(fields: [neighborhoodId], references: [id])
  neighborhoodId        String              @db.Uuid

  @@id([providerPreferencesId, neighborhoodId])
}

model House {
  id          String     @id @default(uuid()) @db.Uuid
  addressId   String     @db.Uuid
  address     Address    @relation(fields: [addressId], references: [id])
  metersBuilt Int
  ownerId     String     @db.Uuid
  owner       User       @relation(fields: [ownerId], references: [id])
  animals     Boolean?
  Contract    Contract[]
}

model State {
  id     String @id @default(uuid()) @db.Uuid
  name   String @db.VarChar(255)
  uf     String @db.VarChar(2)
  cities City[]
}

model City {
  id            String         @id @default(uuid()) @db.Uuid
  name          String         @db.VarChar(255)
  stateId       String         @db.Uuid
  state         State          @relation(fields: [stateId], references: [id])
  neighborhoods Neighborhood[]
}

model Neighborhood {
  id          String                       @id @default(uuid()) @db.Uuid
  name        String                       @db.VarChar(255)
  cityId      String                       @db.Uuid
  city        City                         @relation(fields: [cityId], references: [id])
  address     Address[]
  preferences NeighborhoodsOnPreferences[]
}

model Address {
  id             String       @id @default(uuid()) @db.Uuid
  description    String       @db.VarChar(255)
  number         String?      @db.VarChar(6)
  neighborhoodId String       @db.Uuid
  neighborhood   Neighborhood @relation(fields: [neighborhoodId], references: [id])
  user           User[]
  House          House[]
}

model Contract {
  id          String   @id @default(uuid()) @db.Uuid
  description String   @db.VarChar(255)
  value       Decimal  @db.Money
  date        DateTime @db.Date
  accepted    Boolean?  @db.Boolean

  houseId      String  @db.Uuid
  house        House   @relation(fields: [houseId], references: [id])
  contractorId String  @db.Uuid
  contractor   User    @relation("contractorContract", fields: [contractorId], references: [id])
  providerId   String  @db.Uuid
  provider     User    @relation("providerContract", fields: [providerId], references: [id])
}
